import { Directive, ElementRef, EventEmitter, Output } from '@angular/core';
import { ResizeSensor } from 'css-element-queries';
import { ResizedEvent } from './resized-event';
import * as ɵngcc0 from '@angular/core';
export class ResizedDirective {
    constructor(element) {
        this.element = element;
        this.resized = new EventEmitter();
    }
    ngOnInit() {
        // only initialize resize watching if sensor is availablei
        if (ResizeSensor) {
            this.resizeSensor = new ResizeSensor(this.element.nativeElement, () => this.onResized());
        }
    }
    ngOnDestroy() {
        if (this.resizeSensor) {
            this.resizeSensor.detach();
        }
    }
    onResized() {
        const newWidth = this.element.nativeElement.clientWidth;
        const newHeight = this.element.nativeElement.clientHeight;
        if (newWidth === this.oldWidth && newHeight === this.oldHeight) {
            return;
        }
        const event = new ResizedEvent(this.element, newWidth, newHeight, this.oldWidth, this.oldHeight);
        this.oldWidth = this.element.nativeElement.clientWidth;
        this.oldHeight = this.element.nativeElement.clientHeight;
        this.resized.emit(event);
    }
}
ResizedDirective.ɵfac = function ResizedDirective_Factory(t) { return new (t || ResizedDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
ResizedDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: ResizedDirective, selectors: [["", "resized", ""]], outputs: { resized: "resized" } });
ResizedDirective.ctorParameters = () => [
    { type: ElementRef }
];
ResizedDirective.propDecorators = {
    resized: [{ type: Output }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ResizedDirective, [{
        type: Directive,
        args: [{
                // tslint:disable-next-line:directive-selector
                selector: '[resized]'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, { resized: [{
            type: Output
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzaXplZC5kaXJlY3RpdmUuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL2FuZ3VsYXItcmVzaXplLWV2ZW50L3NyYy9saWIvcmVzaXplZC5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsWUFBWSxFQUFVLE1BQU0sRUFBYSxNQUFNLGVBQWUsQ0FBQztBQUMvRixPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDbkQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDOztBQU0vQyxNQUFNLE9BQU8sZ0JBQWdCO0FBQUcsSUFVOUIsWUFBNkIsT0FBbUI7QUFDbEQsUUFEK0IsWUFBTyxHQUFQLE9BQU8sQ0FBWTtBQUFDLFFBUHhDLFlBQU8sR0FBRyxJQUFJLFlBQVksRUFBZ0IsQ0FBQztBQUN0RCxJQU9FLENBQUM7QUFDSCxJQUNFLFFBQVE7QUFBSyxRQUNYLDBEQUEwRDtBQUM5RCxRQUFJLElBQUksWUFBWSxFQUFFO0FBQ3RCLFlBQU0sSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLFlBQVksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztBQUMvRixTQUFLO0FBQ0wsSUFBRSxDQUFDO0FBQ0gsSUFDRSxXQUFXO0FBQUssUUFDZCxJQUFJLElBQUksQ0FBQyxZQUFZLEVBQUU7QUFDM0IsWUFBTSxJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sRUFBRSxDQUFDO0FBQ2pDLFNBQUs7QUFDTCxJQUFFLENBQUM7QUFDSCxJQUNVLFNBQVM7QUFBSyxRQUNwQixNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxXQUFXLENBQUM7QUFDNUQsUUFBSSxNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxZQUFZLENBQUM7QUFDOUQsUUFDSSxJQUFJLFFBQVEsS0FBSyxJQUFJLENBQUMsUUFBUSxJQUFJLFNBQVMsS0FBSyxJQUFJLENBQUMsU0FBUyxFQUFFO0FBQ3BFLFlBQU0sT0FBTztBQUNiLFNBQUs7QUFDTCxRQUNJLE1BQU0sS0FBSyxHQUFHLElBQUksWUFBWSxDQUM1QixJQUFJLENBQUMsT0FBTyxFQUNaLFFBQVEsRUFDUixTQUFTLEVBQ1QsSUFBSSxDQUFDLFFBQVEsRUFDYixJQUFJLENBQUMsU0FBUyxDQUNmLENBQUM7QUFDTixRQUNJLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsV0FBVyxDQUFDO0FBQzNELFFBQUksSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxZQUFZLENBQUM7QUFDN0QsUUFDSSxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUM3QixJQUFFLENBQUM7QUFDSDs0Q0FuREMsU0FBUyxTQUFDLGtCQUNULDhDQUE4QyxpQkFDOUM7SUFBUSxFQUFFLFdBQVcsY0FDdEIsK0hBQ0k7QUFBQztBQUEwQyxZQVI1QixVQUFVO0FBQUc7QUFBRztBQUFvQyxzQkFVckUsTUFBTTtBQUNSOzs7Ozs7Ozs7b0JBQUU7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyLCBPbkluaXQsIE91dHB1dCwgT25EZXN0cm95IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBSZXNpemVTZW5zb3IgfSBmcm9tICdjc3MtZWxlbWVudC1xdWVyaWVzJztcbmltcG9ydCB7IFJlc2l6ZWRFdmVudCB9IGZyb20gJy4vcmVzaXplZC1ldmVudCc7XG5cbkBEaXJlY3RpdmUoe1xuICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6ZGlyZWN0aXZlLXNlbGVjdG9yXG4gIHNlbGVjdG9yOiAnW3Jlc2l6ZWRdJ1xufSlcbmV4cG9ydCBjbGFzcyBSZXNpemVkRGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3kge1xuXG4gIEBPdXRwdXQoKVxuICByZWFkb25seSByZXNpemVkID0gbmV3IEV2ZW50RW1pdHRlcjxSZXNpemVkRXZlbnQ+KCk7XG5cbiAgcHJpdmF0ZSBvbGRXaWR0aDogbnVtYmVyO1xuICBwcml2YXRlIG9sZEhlaWdodDogbnVtYmVyO1xuXG4gIHByaXZhdGUgcmVzaXplU2Vuc29yOiBSZXNpemVTZW5zb3I7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSBlbGVtZW50OiBFbGVtZW50UmVmKSB7XG4gIH1cblxuICBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgICAvLyBvbmx5IGluaXRpYWxpemUgcmVzaXplIHdhdGNoaW5nIGlmIHNlbnNvciBpcyBhdmFpbGFibGVpXG4gICAgaWYgKFJlc2l6ZVNlbnNvcikge1xuICAgICAgdGhpcy5yZXNpemVTZW5zb3IgPSBuZXcgUmVzaXplU2Vuc29yKHRoaXMuZWxlbWVudC5uYXRpdmVFbGVtZW50LCAoKSA9PiB0aGlzLm9uUmVzaXplZCgpKTtcbiAgICB9XG4gIH1cblxuICBuZ09uRGVzdHJveSgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5yZXNpemVTZW5zb3IpIHtcbiAgICAgIHRoaXMucmVzaXplU2Vuc29yLmRldGFjaCgpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgb25SZXNpemVkKCk6IHZvaWQge1xuICAgIGNvbnN0IG5ld1dpZHRoID0gdGhpcy5lbGVtZW50Lm5hdGl2ZUVsZW1lbnQuY2xpZW50V2lkdGg7XG4gICAgY29uc3QgbmV3SGVpZ2h0ID0gdGhpcy5lbGVtZW50Lm5hdGl2ZUVsZW1lbnQuY2xpZW50SGVpZ2h0O1xuXG4gICAgaWYgKG5ld1dpZHRoID09PSB0aGlzLm9sZFdpZHRoICYmIG5ld0hlaWdodCA9PT0gdGhpcy5vbGRIZWlnaHQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBldmVudCA9IG5ldyBSZXNpemVkRXZlbnQoXG4gICAgICB0aGlzLmVsZW1lbnQsXG4gICAgICBuZXdXaWR0aCxcbiAgICAgIG5ld0hlaWdodCxcbiAgICAgIHRoaXMub2xkV2lkdGgsXG4gICAgICB0aGlzLm9sZEhlaWdodFxuICAgICk7XG5cbiAgICB0aGlzLm9sZFdpZHRoID0gdGhpcy5lbGVtZW50Lm5hdGl2ZUVsZW1lbnQuY2xpZW50V2lkdGg7XG4gICAgdGhpcy5vbGRIZWlnaHQgPSB0aGlzLmVsZW1lbnQubmF0aXZlRWxlbWVudC5jbGllbnRIZWlnaHQ7XG5cbiAgICB0aGlzLnJlc2l6ZWQuZW1pdChldmVudCk7XG4gIH1cblxufVxuIl19