// tslint:disable: variable-name
/**
 * Created by ahsanayaz on 08/11/2016.
 */
import { PLATFORM_ID, Inject, Injectable } from '@angular/core';
import { isPlatformBrowser } from '@angular/common';
import * as Constants from './device-detector.constants';
import { ReTree } from './retree';
import * as i0 from "@angular/core";
import * as ɵngcc0 from '@angular/core';
export var DeviceType;
(function (DeviceType) {
    DeviceType["Mobile"] = "mobile";
    DeviceType["Tablet"] = "tablet";
    DeviceType["Desktop"] = "desktop";
    DeviceType["Unknown"] = "unknown";
})(DeviceType || (DeviceType = {}));
export var OrientationType;
(function (OrientationType) {
    OrientationType["Portrait"] = "portrait";
    OrientationType["Landscape"] = "landscape";
})(OrientationType || (OrientationType = {}));
const iPad = 'iPad';
export class DeviceDetectorService {
    constructor(platformId) {
        this.platformId = platformId;
        this.ua = '';
        this.userAgent = '';
        this.os = '';
        this.browser = '';
        this.device = '';
        this.os_version = '';
        this.browser_version = '';
        this.reTree = new ReTree();
        this.deviceType = '';
        this.orientation = '';
        if (isPlatformBrowser(this.platformId) && typeof window !== 'undefined') {
            this.userAgent = window.navigator.userAgent;
        }
        this.setDeviceInfo(this.userAgent);
    }
    /**
     * @author Ahsan Ayaz
     * @desc Sets the initial value of the device when the service is initiated.
     * This value is later accessible for usage
     */
    setDeviceInfo(ua = this.userAgent) {
        if (ua !== this.userAgent) {
            this.userAgent = ua;
        }
        const mappings = [
            { const: 'OS', prop: 'os' },
            { const: 'BROWSERS', prop: 'browser' },
            { const: 'DEVICES', prop: 'device' },
            { const: 'OS_VERSIONS', prop: 'os_version' },
        ];
        mappings.forEach(mapping => {
            this[mapping.prop] = Object.keys(Constants[mapping.const]).reduce((obj, item) => {
                if (Constants[mapping.const][item] === 'device') {
                    // hack for iOS 13 Tablet
                    if (isPlatformBrowser(this.platformId) &&
                        (!!this.reTree.test(this.userAgent, Constants.TABLETS_RE[iPad]) ||
                            (navigator.platform === 'MacIntel' && navigator.maxTouchPoints > 1))) {
                        obj[Constants[mapping.const][item]] = iPad;
                        return Object;
                    }
                }
                obj[Constants[mapping.const][item]] = this.reTree.test(ua, Constants[`${mapping.const}_RE`][item]);
                return obj;
            }, {});
        });
        mappings.forEach(mapping => {
            this[mapping.prop] = Object.keys(Constants[mapping.const])
                .map(key => {
                return Constants[mapping.const][key];
            })
                .reduce((previousValue, currentValue) => {
                if (mapping.prop === 'device' && previousValue === Constants[mapping.const].ANDROID) {
                    // if we have the actual device found, instead of 'Android', return the actual device
                    return this[mapping.prop][currentValue] ? currentValue : previousValue;
                }
                else {
                    return previousValue === Constants[mapping.const].UNKNOWN && this[mapping.prop][currentValue]
                        ? currentValue
                        : previousValue;
                }
            }, Constants[mapping.const].UNKNOWN);
        });
        this.browser_version = '0';
        if (this.browser !== Constants.BROWSERS.UNKNOWN) {
            const re = Constants.BROWSER_VERSIONS_RE[this.browser];
            const res = this.reTree.exec(ua, re);
            if (!!res) {
                this.browser_version = res[1];
            }
        }
        if (typeof window !== 'undefined' && window.matchMedia) {
            this.orientation = window.matchMedia('(orientation: landscape)').matches
                ? OrientationType.Landscape
                : OrientationType.Portrait;
        }
        else {
            this.orientation = Constants.GENERAL.UKNOWN;
        }
        this.deviceType = this.isTablet()
            ? DeviceType.Tablet
            : this.isMobile(this.userAgent)
                ? DeviceType.Mobile
                : this.isDesktop(this.userAgent)
                    ? DeviceType.Desktop
                    : DeviceType.Unknown;
    }
    /**
     * @author Ahsan Ayaz
     * @desc Returns the device information
     * @returns the device information object.
     */
    getDeviceInfo() {
        const deviceInfo = {
            userAgent: this.userAgent,
            os: this.os,
            browser: this.browser,
            device: this.device,
            os_version: this.os_version,
            browser_version: this.browser_version,
            deviceType: this.deviceType,
            orientation: this.orientation,
        };
        return deviceInfo;
    }
    /**
     * @author Ahsan Ayaz
     * @desc Compares the current device info with the mobile devices to check
     * if the current device is a mobile and also check current device is tablet so it will return false.
     * @returns whether the current device is a mobile
     */
    isMobile(userAgent = this.userAgent) {
        if (this.isTablet(userAgent)) {
            return false;
        }
        const match = Object.keys(Constants.MOBILES_RE).find(mobile => {
            return this.reTree.test(userAgent, Constants.MOBILES_RE[mobile]);
        });
        return !!match;
    }
    /**
     * @author Ahsan Ayaz
     * @desc Compares the current device info with the tablet devices to check
     * if the current device is a tablet.
     * @returns whether the current device is a tablet
     */
    isTablet(userAgent = this.userAgent) {
        if (isPlatformBrowser(this.platformId) &&
            (!!this.reTree.test(this.userAgent, Constants.TABLETS_RE[iPad]) ||
                (typeof navigator !== 'undefined' && navigator.platform === 'MacIntel' && navigator.maxTouchPoints > 1))) {
            return true;
        }
        const match = Object.keys(Constants.TABLETS_RE).find(mobile => {
            return !!this.reTree.test(userAgent, Constants.TABLETS_RE[mobile]);
        });
        return !!match;
    }
    /**
     * @author Ahsan Ayaz
     * @desc Compares the current device info with the desktop devices to check
     * if the current device is a desktop device.
     * @returns whether the current device is a desktop device
     */
    isDesktop(userAgent = this.userAgent) {
        const desktopDevices = [Constants.DEVICES.PS4, Constants.DEVICES.CHROME_BOOK, Constants.DEVICES.UNKNOWN];
        if (this.device === Constants.DEVICES.UNKNOWN) {
            if (this.isMobile(userAgent) || this.isTablet(userAgent)) {
                return false;
            }
        }
        return desktopDevices.indexOf(this.device) > -1;
    }
}
DeviceDetectorService.ɵfac = function DeviceDetectorService_Factory(t) { return new (t || DeviceDetectorService)(ɵngcc0.ɵɵinject(PLATFORM_ID)); };
DeviceDetectorService.ɵprov = i0.ɵɵdefineInjectable({ factory: function DeviceDetectorService_Factory() { return new DeviceDetectorService(i0.ɵɵinject(i0.PLATFORM_ID)); }, token: DeviceDetectorService, providedIn: "root" });
DeviceDetectorService.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DeviceDetectorService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: undefined, decorators: [{
                type: Inject,
                args: [PLATFORM_ID]
            }] }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGV2aWNlLWRldGVjdG9yLnNlcnZpY2UuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL25neC1kZXZpY2UtZGV0ZWN0b3Ivc3JjL2xpYi9kZXZpY2UtZGV0ZWN0b3Iuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxnQ0FBZ0M7QUFDaEM7QUFDQTtBQUNBLEdBQUc7QUFDSCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDaEUsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDcEQsT0FBTyxLQUFLLFNBQVMsTUFBTSw2QkFBNkIsQ0FBQztBQUN6RCxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBQ2xDOztBQVdBLE1BQU0sQ0FBTixJQUFZLFVBS1g7QUFMRCxXQUFZLFVBQVU7QUFDckIsSUFBQywrQkFBaUIsQ0FBQTtBQUFDLElBQ2xCLCtCQUFpQixDQUFBO0FBQUMsSUFDbEIsaUNBQW1CLENBQUE7QUFBQyxJQUNwQixpQ0FBbUIsQ0FBQTtBQUNyQixDQUFDLEVBTFcsVUFBVSxLQUFWLFVBQVUsUUFLckI7QUFDRCxNQUFNLENBQU4sSUFBWSxlQUdYO0FBSEQsV0FBWSxlQUFlO0FBQzFCLElBQUMsd0NBQXFCLENBQUE7QUFBQyxJQUN0QiwwQ0FBdUIsQ0FBQTtBQUN6QixDQUFDLEVBSFcsZUFBZSxLQUFmLGVBQWUsUUFHMUI7QUFFRCxNQUFNLElBQUksR0FBRyxNQUFNLENBQUM7QUFLcEIsTUFBTSxPQUFPLHFCQUFxQjtBQUNsQyxJQVVFLFlBQXlDLFVBQWU7QUFDMUQsUUFEMkMsZUFBVSxHQUFWLFVBQVUsQ0FBSztBQUFDLFFBVnpELE9BQUUsR0FBRyxFQUFFLENBQUM7QUFDVixRQUFFLGNBQVMsR0FBRyxFQUFFLENBQUM7QUFDakIsUUFBRSxPQUFFLEdBQUcsRUFBRSxDQUFDO0FBQ1YsUUFBRSxZQUFPLEdBQUcsRUFBRSxDQUFDO0FBQ2YsUUFBRSxXQUFNLEdBQUcsRUFBRSxDQUFDO0FBQ2QsUUFBRSxlQUFVLEdBQUcsRUFBRSxDQUFDO0FBQ2xCLFFBQUUsb0JBQWUsR0FBRyxFQUFFLENBQUM7QUFDdkIsUUFBRSxXQUFNLEdBQUcsSUFBSSxNQUFNLEVBQUUsQ0FBQztBQUN4QixRQUFFLGVBQVUsR0FBRyxFQUFFLENBQUM7QUFDbEIsUUFBRSxnQkFBVyxHQUFHLEVBQUUsQ0FBQztBQUNuQixRQUNJLElBQUksaUJBQWlCLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLE9BQU8sTUFBTSxLQUFLLFdBQVcsRUFBRTtBQUM3RSxZQUFNLElBQUksQ0FBQyxTQUFTLEdBQUcsTUFBTSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUM7QUFDbEQsU0FBSztBQUNMLFFBQUksSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDdkMsSUFBRSxDQUFDO0FBQ0gsSUFDRTtBQUNGO0FBQ0U7QUFDRTtBQUVKLE9BREs7QUFDTCxJQUFFLGFBQWEsQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDLFNBQVM7QUFBSSxRQUNuQyxJQUFJLEVBQUUsS0FBSyxJQUFJLENBQUMsU0FBUyxFQUFFO0FBQy9CLFlBQU0sSUFBSSxDQUFDLFNBQVMsR0FBRyxFQUFFLENBQUM7QUFDMUIsU0FBSztBQUNMLFFBQUksTUFBTSxRQUFRLEdBQUc7QUFDckIsWUFBTSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRTtBQUNqQyxZQUFNLEVBQUUsS0FBSyxFQUFFLFVBQVUsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFO0FBQzVDLFlBQU0sRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUU7QUFDMUMsWUFBTSxFQUFFLEtBQUssRUFBRSxhQUFhLEVBQUUsSUFBSSxFQUFFLFlBQVksRUFBRTtBQUNsRCxTQUFLLENBQUM7QUFDTixRQUNJLFFBQVEsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUU7QUFDL0IsWUFBTSxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQVEsRUFBRSxJQUFTLEVBQUUsRUFBRTtBQUNoRyxnQkFBUSxJQUFJLFNBQVMsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssUUFBUSxFQUFFO0FBQ3pELG9CQUFVLHlCQUF5QjtBQUNuQyxvQkFBVSxJQUNFLGlCQUFpQixDQUFDLElBQUksQ0FBQyxVQUFVLENBQUM7QUFDOUMsd0JBQVksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxTQUFTLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQzNFLDRCQUFjLENBQUMsU0FBUyxDQUFDLFFBQVEsS0FBSyxVQUFVLElBQUksU0FBUyxDQUFDLGNBQWMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUN0RTtBQUNaLHdCQUFZLEdBQUcsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDO0FBQ3ZELHdCQUFZLE9BQU8sTUFBTSxDQUFDO0FBQzFCLHFCQUFXO0FBQ1gsaUJBQVM7QUFDVCxnQkFBUSxHQUFHLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxTQUFTLENBQUMsR0FBRyxPQUFPLENBQUMsS0FBSyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQzNHLGdCQUFRLE9BQU8sR0FBRyxDQUFDO0FBQ25CLFlBQU0sQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2IsUUFBSSxDQUFDLENBQUMsQ0FBQztBQUNQLFFBQ0ksUUFBUSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBRTtBQUMvQixZQUFNLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ2hFLGlCQUFTLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRTtBQUNuQixnQkFBVSxPQUFPLFNBQVMsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDL0MsWUFBUSxDQUFDLENBQUM7QUFDVixpQkFBUyxNQUFNLENBQUMsQ0FBQyxhQUFhLEVBQUUsWUFBWSxFQUFFLEVBQUU7QUFDaEQsZ0JBQVUsSUFBSSxPQUFPLENBQUMsSUFBSSxLQUFLLFFBQVEsSUFBSSxhQUFhLEtBQUssU0FBUyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxPQUFPLEVBQUU7QUFDL0Ysb0JBQVkscUZBQXFGO0FBQ2pHLG9CQUFZLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUM7QUFDbkYsaUJBQVc7QUFBQyxxQkFBSztBQUNqQixvQkFBWSxPQUFPLGFBQWEsS0FBSyxTQUFTLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLE9BQU8sSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLFlBQVksQ0FBQztBQUN6Ryx3QkFBYyxDQUFDLENBQUMsWUFBWTtBQUM1Qix3QkFBYyxDQUFDLENBQUMsYUFBYSxDQUFDO0FBQzlCLGlCQUFXO0FBQ1gsWUFBUSxDQUFDLEVBQUUsU0FBUyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUM3QyxRQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ1AsUUFDSSxJQUFJLENBQUMsZUFBZSxHQUFHLEdBQUcsQ0FBQztBQUMvQixRQUFJLElBQUksSUFBSSxDQUFDLE9BQU8sS0FBSyxTQUFTLENBQUMsUUFBUSxDQUFDLE9BQU8sRUFBRTtBQUNyRCxZQUFNLE1BQU0sRUFBRSxHQUFHLFNBQVMsQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDN0QsWUFBTSxNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDM0MsWUFBTSxJQUFJLENBQUMsQ0FBQyxHQUFHLEVBQUU7QUFDakIsZ0JBQVEsSUFBSSxDQUFDLGVBQWUsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDdEMsYUFBTztBQUNQLFNBQUs7QUFDTCxRQUFJLElBQUksT0FBTyxNQUFNLEtBQUssV0FBVyxJQUFJLE1BQU0sQ0FBQyxVQUFVLEVBQUU7QUFDNUQsWUFBTSxJQUFJLENBQUMsV0FBVyxHQUFHLE1BQU0sQ0FBQyxVQUFVLENBQUMsMEJBQTBCLENBQUMsQ0FBQyxPQUFPO0FBQzlFLGdCQUFRLENBQUMsQ0FBQyxlQUFlLENBQUMsU0FBUztBQUNuQyxnQkFBUSxDQUFDLENBQUMsZUFBZSxDQUFDLFFBQVEsQ0FBQztBQUNuQyxTQUFLO0FBQUMsYUFBSztBQUNYLFlBQU0sSUFBSSxDQUFDLFdBQVcsR0FBRyxTQUFTLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQztBQUNsRCxTQUFLO0FBQ0wsUUFDSSxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxRQUFRLEVBQUU7QUFDckMsWUFBTSxDQUFDLENBQUMsVUFBVSxDQUFDLE1BQU07QUFDekIsWUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDO0FBQ3JDLGdCQUFNLENBQUMsQ0FBQyxVQUFVLENBQUMsTUFBTTtBQUN6QixnQkFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDO0FBQ3RDLG9CQUFNLENBQUMsQ0FBQyxVQUFVLENBQUMsT0FBTztBQUMxQixvQkFBTSxDQUFDLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQztBQUMzQixJQUFFLENBQUM7QUFDSCxJQUNFO0FBQ0Y7QUFDRTtBQUNFO0FBRUosT0FESztBQUNMLElBQVMsYUFBYTtBQUFLLFFBQ3ZCLE1BQU0sVUFBVSxHQUFlO0FBQ25DLFlBQU0sU0FBUyxFQUFFLElBQUksQ0FBQyxTQUFTO0FBQy9CLFlBQU0sRUFBRSxFQUFFLElBQUksQ0FBQyxFQUFFO0FBQ2pCLFlBQU0sT0FBTyxFQUFFLElBQUksQ0FBQyxPQUFPO0FBQzNCLFlBQU0sTUFBTSxFQUFFLElBQUksQ0FBQyxNQUFNO0FBQ3pCLFlBQU0sVUFBVSxFQUFFLElBQUksQ0FBQyxVQUFVO0FBQ2pDLFlBQU0sZUFBZSxFQUFFLElBQUksQ0FBQyxlQUFlO0FBQzNDLFlBQU0sVUFBVSxFQUFFLElBQUksQ0FBQyxVQUFVO0FBQ2pDLFlBQU0sV0FBVyxFQUFFLElBQUksQ0FBQyxXQUFXO0FBQ25DLFNBQUssQ0FBQztBQUNOLFFBQUksT0FBTyxVQUFVLENBQUM7QUFDdEIsSUFBRSxDQUFDO0FBQ0gsSUFDRTtBQUNGO0FBQ0U7QUFDRTtBQUNFO0FBRUosT0FERztBQUNMLElBQVMsUUFBUSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsU0FBUztBQUFJLFFBQzVDLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsRUFBRTtBQUNsQyxZQUFNLE9BQU8sS0FBSyxDQUFDO0FBQ25CLFNBQUs7QUFDTCxRQUFJLE1BQU0sS0FBSyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRTtBQUNsRSxZQUFNLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLFNBQVMsQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztBQUN2RSxRQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ1AsUUFBSSxPQUFPLENBQUMsQ0FBQyxLQUFLLENBQUM7QUFDbkIsSUFBRSxDQUFDO0FBQ0gsSUFDRTtBQUNGO0FBQ0U7QUFDRTtBQUNFO0FBRUosT0FERztBQUNMLElBQVMsUUFBUSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsU0FBUztBQUFJLFFBQzVDLElBQ0UsaUJBQWlCLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQztBQUN4QyxZQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsU0FBUyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUNyRSxnQkFBUSxDQUFDLE9BQU8sU0FBUyxLQUFLLFdBQVcsSUFBSSxTQUFTLENBQUMsUUFBUSxLQUFLLFVBQVUsSUFBSSxTQUFTLENBQUMsY0FBYyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQzFHO0FBQ04sWUFBTSxPQUFPLElBQUksQ0FBQztBQUNsQixTQUFLO0FBQ0wsUUFBSSxNQUFNLEtBQUssR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUU7QUFDbEUsWUFBTSxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsU0FBUyxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0FBQ3pFLFFBQUksQ0FBQyxDQUFDLENBQUM7QUFDUCxRQUFJLE9BQU8sQ0FBQyxDQUFDLEtBQUssQ0FBQztBQUNuQixJQUFFLENBQUM7QUFDSCxJQUNFO0FBQ0Y7QUFDRTtBQUNFO0FBQ0U7QUFFSixPQURHO0FBQ0wsSUFBUyxTQUFTLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxTQUFTO0FBQUksUUFDN0MsTUFBTSxjQUFjLEdBQUcsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxTQUFTLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRSxTQUFTLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQzdHLFFBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxLQUFLLFNBQVMsQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFO0FBQ25ELFlBQU0sSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLEVBQUU7QUFDaEUsZ0JBQVEsT0FBTyxLQUFLLENBQUM7QUFDckIsYUFBTztBQUNQLFNBQUs7QUFDTCxRQUFJLE9BQU8sY0FBYyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDcEQsSUFBRSxDQUFDO0FBQ0g7a0pBQUM7QUFDRCxnT0FyS0s7QUFBQztFQUhMLFVBQVUsU0FBQyxrQkFDVixVQUFVLEVBQUUsTUFBTSxlQUNuQix4RUFHSSw0Q0FTVSxNQUFNLFNBQUMsV0FBVztBQUFROzs7Ozs7Ozs7a0NBQUU7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHRzbGludDpkaXNhYmxlOiB2YXJpYWJsZS1uYW1lXG4vKipcbiAqIENyZWF0ZWQgYnkgYWhzYW5heWF6IG9uIDA4LzExLzIwMTYuXG4gKi9cbmltcG9ydCB7IFBMQVRGT1JNX0lELCBJbmplY3QsIEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGlzUGxhdGZvcm1Ccm93c2VyIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCAqIGFzIENvbnN0YW50cyBmcm9tICcuL2RldmljZS1kZXRlY3Rvci5jb25zdGFudHMnO1xuaW1wb3J0IHsgUmVUcmVlIH0gZnJvbSAnLi9yZXRyZWUnO1xuXG5leHBvcnQgaW50ZXJmYWNlIERldmljZUluZm8ge1xuICB1c2VyQWdlbnQ6IHN0cmluZztcbiAgb3M6IHN0cmluZztcbiAgYnJvd3Nlcjogc3RyaW5nO1xuICBkZXZpY2U6IHN0cmluZztcbiAgb3NfdmVyc2lvbjogc3RyaW5nO1xuICBicm93c2VyX3ZlcnNpb246IHN0cmluZztcbiAgZGV2aWNlVHlwZTogc3RyaW5nO1xuICBvcmllbnRhdGlvbjogc3RyaW5nO1xufVxuZXhwb3J0IGVudW0gRGV2aWNlVHlwZSB7XG4gIE1vYmlsZSA9ICdtb2JpbGUnLFxuICBUYWJsZXQgPSAndGFibGV0JyxcbiAgRGVza3RvcCA9ICdkZXNrdG9wJyxcbiAgVW5rbm93biA9ICd1bmtub3duJyxcbn1cbmV4cG9ydCBlbnVtIE9yaWVudGF0aW9uVHlwZSB7XG4gIFBvcnRyYWl0ID0gJ3BvcnRyYWl0JyxcbiAgTGFuZHNjYXBlID0gJ2xhbmRzY2FwZScsXG59XG5cbmNvbnN0IGlQYWQgPSAnaVBhZCc7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxufSlcbmV4cG9ydCBjbGFzcyBEZXZpY2VEZXRlY3RvclNlcnZpY2Uge1xuICB1YSA9ICcnO1xuICB1c2VyQWdlbnQgPSAnJztcbiAgb3MgPSAnJztcbiAgYnJvd3NlciA9ICcnO1xuICBkZXZpY2UgPSAnJztcbiAgb3NfdmVyc2lvbiA9ICcnO1xuICBicm93c2VyX3ZlcnNpb24gPSAnJztcbiAgcmVUcmVlID0gbmV3IFJlVHJlZSgpO1xuICBkZXZpY2VUeXBlID0gJyc7XG4gIG9yaWVudGF0aW9uID0gJyc7XG4gIGNvbnN0cnVjdG9yKEBJbmplY3QoUExBVEZPUk1fSUQpIHByaXZhdGUgcGxhdGZvcm1JZDogYW55KSB7XG4gICAgaWYgKGlzUGxhdGZvcm1Ccm93c2VyKHRoaXMucGxhdGZvcm1JZCkgJiYgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRoaXMudXNlckFnZW50ID0gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQ7XG4gICAgfVxuICAgIHRoaXMuc2V0RGV2aWNlSW5mbyh0aGlzLnVzZXJBZ2VudCk7XG4gIH1cblxuICAvKipcbiAgICogQGF1dGhvciBBaHNhbiBBeWF6XG4gICAqIEBkZXNjIFNldHMgdGhlIGluaXRpYWwgdmFsdWUgb2YgdGhlIGRldmljZSB3aGVuIHRoZSBzZXJ2aWNlIGlzIGluaXRpYXRlZC5cbiAgICogVGhpcyB2YWx1ZSBpcyBsYXRlciBhY2Nlc3NpYmxlIGZvciB1c2FnZVxuICAgKi9cbiAgc2V0RGV2aWNlSW5mbyh1YSA9IHRoaXMudXNlckFnZW50KTogdm9pZCB7XG4gICAgaWYgKHVhICE9PSB0aGlzLnVzZXJBZ2VudCkge1xuICAgICAgdGhpcy51c2VyQWdlbnQgPSB1YTtcbiAgICB9XG4gICAgY29uc3QgbWFwcGluZ3MgPSBbXG4gICAgICB7IGNvbnN0OiAnT1MnLCBwcm9wOiAnb3MnIH0sXG4gICAgICB7IGNvbnN0OiAnQlJPV1NFUlMnLCBwcm9wOiAnYnJvd3NlcicgfSxcbiAgICAgIHsgY29uc3Q6ICdERVZJQ0VTJywgcHJvcDogJ2RldmljZScgfSxcbiAgICAgIHsgY29uc3Q6ICdPU19WRVJTSU9OUycsIHByb3A6ICdvc192ZXJzaW9uJyB9LFxuICAgIF07XG5cbiAgICBtYXBwaW5ncy5mb3JFYWNoKG1hcHBpbmcgPT4ge1xuICAgICAgdGhpc1ttYXBwaW5nLnByb3BdID0gT2JqZWN0LmtleXMoQ29uc3RhbnRzW21hcHBpbmcuY29uc3RdKS5yZWR1Y2UoKG9iajogYW55LCBpdGVtOiBhbnkpID0+IHtcbiAgICAgICAgaWYgKENvbnN0YW50c1ttYXBwaW5nLmNvbnN0XVtpdGVtXSA9PT0gJ2RldmljZScpIHtcbiAgICAgICAgICAvLyBoYWNrIGZvciBpT1MgMTMgVGFibGV0XG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgaXNQbGF0Zm9ybUJyb3dzZXIodGhpcy5wbGF0Zm9ybUlkKSAmJlxuICAgICAgICAgICAgKCEhdGhpcy5yZVRyZWUudGVzdCh0aGlzLnVzZXJBZ2VudCwgQ29uc3RhbnRzLlRBQkxFVFNfUkVbaVBhZF0pIHx8XG4gICAgICAgICAgICAgIChuYXZpZ2F0b3IucGxhdGZvcm0gPT09ICdNYWNJbnRlbCcgJiYgbmF2aWdhdG9yLm1heFRvdWNoUG9pbnRzID4gMSkpXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICBvYmpbQ29uc3RhbnRzW21hcHBpbmcuY29uc3RdW2l0ZW1dXSA9IGlQYWQ7XG4gICAgICAgICAgICByZXR1cm4gT2JqZWN0O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBvYmpbQ29uc3RhbnRzW21hcHBpbmcuY29uc3RdW2l0ZW1dXSA9IHRoaXMucmVUcmVlLnRlc3QodWEsIENvbnN0YW50c1tgJHttYXBwaW5nLmNvbnN0fV9SRWBdW2l0ZW1dKTtcbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICAgIH0sIHt9KTtcbiAgICB9KTtcblxuICAgIG1hcHBpbmdzLmZvckVhY2gobWFwcGluZyA9PiB7XG4gICAgICB0aGlzW21hcHBpbmcucHJvcF0gPSBPYmplY3Qua2V5cyhDb25zdGFudHNbbWFwcGluZy5jb25zdF0pXG4gICAgICAgIC5tYXAoa2V5ID0+IHtcbiAgICAgICAgICByZXR1cm4gQ29uc3RhbnRzW21hcHBpbmcuY29uc3RdW2tleV07XG4gICAgICAgIH0pXG4gICAgICAgIC5yZWR1Y2UoKHByZXZpb3VzVmFsdWUsIGN1cnJlbnRWYWx1ZSkgPT4ge1xuICAgICAgICAgIGlmIChtYXBwaW5nLnByb3AgPT09ICdkZXZpY2UnICYmIHByZXZpb3VzVmFsdWUgPT09IENvbnN0YW50c1ttYXBwaW5nLmNvbnN0XS5BTkRST0lEKSB7XG4gICAgICAgICAgICAvLyBpZiB3ZSBoYXZlIHRoZSBhY3R1YWwgZGV2aWNlIGZvdW5kLCBpbnN0ZWFkIG9mICdBbmRyb2lkJywgcmV0dXJuIHRoZSBhY3R1YWwgZGV2aWNlXG4gICAgICAgICAgICByZXR1cm4gdGhpc1ttYXBwaW5nLnByb3BdW2N1cnJlbnRWYWx1ZV0gPyBjdXJyZW50VmFsdWUgOiBwcmV2aW91c1ZhbHVlO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gcHJldmlvdXNWYWx1ZSA9PT0gQ29uc3RhbnRzW21hcHBpbmcuY29uc3RdLlVOS05PV04gJiYgdGhpc1ttYXBwaW5nLnByb3BdW2N1cnJlbnRWYWx1ZV1cbiAgICAgICAgICAgICAgPyBjdXJyZW50VmFsdWVcbiAgICAgICAgICAgICAgOiBwcmV2aW91c1ZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSwgQ29uc3RhbnRzW21hcHBpbmcuY29uc3RdLlVOS05PV04pO1xuICAgIH0pO1xuXG4gICAgdGhpcy5icm93c2VyX3ZlcnNpb24gPSAnMCc7XG4gICAgaWYgKHRoaXMuYnJvd3NlciAhPT0gQ29uc3RhbnRzLkJST1dTRVJTLlVOS05PV04pIHtcbiAgICAgIGNvbnN0IHJlID0gQ29uc3RhbnRzLkJST1dTRVJfVkVSU0lPTlNfUkVbdGhpcy5icm93c2VyXTtcbiAgICAgIGNvbnN0IHJlcyA9IHRoaXMucmVUcmVlLmV4ZWModWEsIHJlKTtcbiAgICAgIGlmICghIXJlcykge1xuICAgICAgICB0aGlzLmJyb3dzZXJfdmVyc2lvbiA9IHJlc1sxXTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5tYXRjaE1lZGlhKSB7XG4gICAgICB0aGlzLm9yaWVudGF0aW9uID0gd2luZG93Lm1hdGNoTWVkaWEoJyhvcmllbnRhdGlvbjogbGFuZHNjYXBlKScpLm1hdGNoZXNcbiAgICAgICAgPyBPcmllbnRhdGlvblR5cGUuTGFuZHNjYXBlXG4gICAgICAgIDogT3JpZW50YXRpb25UeXBlLlBvcnRyYWl0O1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLm9yaWVudGF0aW9uID0gQ29uc3RhbnRzLkdFTkVSQUwuVUtOT1dOO1xuICAgIH1cblxuICAgIHRoaXMuZGV2aWNlVHlwZSA9IHRoaXMuaXNUYWJsZXQoKVxuICAgICAgPyBEZXZpY2VUeXBlLlRhYmxldFxuICAgICAgOiB0aGlzLmlzTW9iaWxlKHRoaXMudXNlckFnZW50KVxuICAgICAgPyBEZXZpY2VUeXBlLk1vYmlsZVxuICAgICAgOiB0aGlzLmlzRGVza3RvcCh0aGlzLnVzZXJBZ2VudClcbiAgICAgID8gRGV2aWNlVHlwZS5EZXNrdG9wXG4gICAgICA6IERldmljZVR5cGUuVW5rbm93bjtcbiAgfVxuXG4gIC8qKlxuICAgKiBAYXV0aG9yIEFoc2FuIEF5YXpcbiAgICogQGRlc2MgUmV0dXJucyB0aGUgZGV2aWNlIGluZm9ybWF0aW9uXG4gICAqIEByZXR1cm5zIHRoZSBkZXZpY2UgaW5mb3JtYXRpb24gb2JqZWN0LlxuICAgKi9cbiAgcHVibGljIGdldERldmljZUluZm8oKTogRGV2aWNlSW5mbyB7XG4gICAgY29uc3QgZGV2aWNlSW5mbzogRGV2aWNlSW5mbyA9IHtcbiAgICAgIHVzZXJBZ2VudDogdGhpcy51c2VyQWdlbnQsXG4gICAgICBvczogdGhpcy5vcyxcbiAgICAgIGJyb3dzZXI6IHRoaXMuYnJvd3NlcixcbiAgICAgIGRldmljZTogdGhpcy5kZXZpY2UsXG4gICAgICBvc192ZXJzaW9uOiB0aGlzLm9zX3ZlcnNpb24sXG4gICAgICBicm93c2VyX3ZlcnNpb246IHRoaXMuYnJvd3Nlcl92ZXJzaW9uLFxuICAgICAgZGV2aWNlVHlwZTogdGhpcy5kZXZpY2VUeXBlLFxuICAgICAgb3JpZW50YXRpb246IHRoaXMub3JpZW50YXRpb24sXG4gICAgfTtcbiAgICByZXR1cm4gZGV2aWNlSW5mbztcbiAgfVxuXG4gIC8qKlxuICAgKiBAYXV0aG9yIEFoc2FuIEF5YXpcbiAgICogQGRlc2MgQ29tcGFyZXMgdGhlIGN1cnJlbnQgZGV2aWNlIGluZm8gd2l0aCB0aGUgbW9iaWxlIGRldmljZXMgdG8gY2hlY2tcbiAgICogaWYgdGhlIGN1cnJlbnQgZGV2aWNlIGlzIGEgbW9iaWxlIGFuZCBhbHNvIGNoZWNrIGN1cnJlbnQgZGV2aWNlIGlzIHRhYmxldCBzbyBpdCB3aWxsIHJldHVybiBmYWxzZS5cbiAgICogQHJldHVybnMgd2hldGhlciB0aGUgY3VycmVudCBkZXZpY2UgaXMgYSBtb2JpbGVcbiAgICovXG4gIHB1YmxpYyBpc01vYmlsZSh1c2VyQWdlbnQgPSB0aGlzLnVzZXJBZ2VudCk6IGJvb2xlYW4ge1xuICAgIGlmICh0aGlzLmlzVGFibGV0KHVzZXJBZ2VudCkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgY29uc3QgbWF0Y2ggPSBPYmplY3Qua2V5cyhDb25zdGFudHMuTU9CSUxFU19SRSkuZmluZChtb2JpbGUgPT4ge1xuICAgICAgcmV0dXJuIHRoaXMucmVUcmVlLnRlc3QodXNlckFnZW50LCBDb25zdGFudHMuTU9CSUxFU19SRVttb2JpbGVdKTtcbiAgICB9KTtcbiAgICByZXR1cm4gISFtYXRjaDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAYXV0aG9yIEFoc2FuIEF5YXpcbiAgICogQGRlc2MgQ29tcGFyZXMgdGhlIGN1cnJlbnQgZGV2aWNlIGluZm8gd2l0aCB0aGUgdGFibGV0IGRldmljZXMgdG8gY2hlY2tcbiAgICogaWYgdGhlIGN1cnJlbnQgZGV2aWNlIGlzIGEgdGFibGV0LlxuICAgKiBAcmV0dXJucyB3aGV0aGVyIHRoZSBjdXJyZW50IGRldmljZSBpcyBhIHRhYmxldFxuICAgKi9cbiAgcHVibGljIGlzVGFibGV0KHVzZXJBZ2VudCA9IHRoaXMudXNlckFnZW50KTogYm9vbGVhbiB7XG4gICAgaWYgKFxuICAgICAgaXNQbGF0Zm9ybUJyb3dzZXIodGhpcy5wbGF0Zm9ybUlkKSAmJlxuICAgICAgKCEhdGhpcy5yZVRyZWUudGVzdCh0aGlzLnVzZXJBZ2VudCwgQ29uc3RhbnRzLlRBQkxFVFNfUkVbaVBhZF0pIHx8XG4gICAgICAgICh0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiBuYXZpZ2F0b3IucGxhdGZvcm0gPT09ICdNYWNJbnRlbCcgJiYgbmF2aWdhdG9yLm1heFRvdWNoUG9pbnRzID4gMSkpXG4gICAgKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgY29uc3QgbWF0Y2ggPSBPYmplY3Qua2V5cyhDb25zdGFudHMuVEFCTEVUU19SRSkuZmluZChtb2JpbGUgPT4ge1xuICAgICAgcmV0dXJuICEhdGhpcy5yZVRyZWUudGVzdCh1c2VyQWdlbnQsIENvbnN0YW50cy5UQUJMRVRTX1JFW21vYmlsZV0pO1xuICAgIH0pO1xuICAgIHJldHVybiAhIW1hdGNoO1xuICB9XG5cbiAgLyoqXG4gICAqIEBhdXRob3IgQWhzYW4gQXlhelxuICAgKiBAZGVzYyBDb21wYXJlcyB0aGUgY3VycmVudCBkZXZpY2UgaW5mbyB3aXRoIHRoZSBkZXNrdG9wIGRldmljZXMgdG8gY2hlY2tcbiAgICogaWYgdGhlIGN1cnJlbnQgZGV2aWNlIGlzIGEgZGVza3RvcCBkZXZpY2UuXG4gICAqIEByZXR1cm5zIHdoZXRoZXIgdGhlIGN1cnJlbnQgZGV2aWNlIGlzIGEgZGVza3RvcCBkZXZpY2VcbiAgICovXG4gIHB1YmxpYyBpc0Rlc2t0b3AodXNlckFnZW50ID0gdGhpcy51c2VyQWdlbnQpOiBib29sZWFuIHtcbiAgICBjb25zdCBkZXNrdG9wRGV2aWNlcyA9IFtDb25zdGFudHMuREVWSUNFUy5QUzQsIENvbnN0YW50cy5ERVZJQ0VTLkNIUk9NRV9CT09LLCBDb25zdGFudHMuREVWSUNFUy5VTktOT1dOXTtcbiAgICBpZiAodGhpcy5kZXZpY2UgPT09IENvbnN0YW50cy5ERVZJQ0VTLlVOS05PV04pIHtcbiAgICAgIGlmICh0aGlzLmlzTW9iaWxlKHVzZXJBZ2VudCkgfHwgdGhpcy5pc1RhYmxldCh1c2VyQWdlbnQpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGRlc2t0b3BEZXZpY2VzLmluZGV4T2YodGhpcy5kZXZpY2UpID4gLTE7XG4gIH1cbn1cbiJdfQ==